# Enterprises Need DevOps in order to succeed in being Truly Agile
Having worked in the Enterprise world for just over 3 years, I have learnt a thing or two about being Agile. At least trying to become as Agile as possible has been a true passion of mine trying to improve my little patch in a huge company with many agendas and political complications.

## A Good Situation
I worked in a team where we worked as a DevOps team way before the term had the meaning it has today. Or at least the buzz word today is certainly much stronger than it was when I started 3 years ago.

We had a team where the Product Owner (on the Business side), was a Software Engineer. He was always just as interested in the details as much as the high level Architecture, Customer Experience and Incident management.

It was a team where Onshore/Offshore was not a “Hassle”. It worked and we complemented each other.

Operations and Security were closeby to answer questions and guide as well as truly support during major releases when we needed them the most.

## A Bad Situation
For me the biggest problem faced today has been the lack of ownership some of our “Feature” teams take when it comes to their work. This is not due to the fact that they are not skilled or they lack care for their work. It’s a much bigger problem caused in the Enterprise where Funding models are Project based and not Product or Capability based.

Projects are funded based on their requirements and priority and how they will impact the customer or bring revenue (hopefully at least both) and once funded, the requirements are given to the teams for delivery. But these feature teams are only funded by that project during its delivery. The work and the application is then deployed to production and is now “live”. Except the team is now put on another project to deliver its requirements and functionality and as always funds and deadlines are very limited. However, the existing application is now handed over to the Operations to manage. At best, there are sufficient documentations available to manage such applications (most cases this is not true).

But now when the application faces an issue directly or indirectly, diagnosing it requires the team that built it which is no longer available. Most times, the developers are contractors and may or may not even still be in the same company. This also impacts the current running project as resources are taken away to resolve such issues, simply because no one else can fix it.

---
## DevOps T-Shaped Teams

A true DevOps team, not only is a stable team (as much as possible), but it also owns the Product that they are delivering and maintaing. There are minimum handovers across to other teams. There are also minimum handovers within the team.

This does not necessarily mean the team will need to be very large in size in order to accomplish all the tasks required for a successful delivery of a Product and Business Capability.

T-Shaped teams are teams that each team member is able to do 80% of the tasks required within the team.

There are many skillsets required within a single team to enable a true DevOps team. Here are a few:
* QA (Functional, E2E, UAT, Performance, Security)
* Engineering (Development, Solutioning and Architecture)
* Customer and User Experience
* Business Requirements Engineer (Analyst)
* Operations and Release Management
* Product Owner

The Team Members can work together closely and learn from each other. The transfer of such knowledge and skillset not only adds to their experience and improve the self-confidence and motivation towards self-improvement, but also ensure they are kept interested in the work that they are doing and the team they work in. This also will reduce the risk of the members wanting to leave the team or the company.

Having the Product Owner who has the power and autherity to make decisions is crucial in making this team a successful one. A product owner without autherity is nothing more than a paper pusher. It is not easy to find great product owners who believe in the product they own.

The point around Authority is an important one for all the roles within the team when it comes to companies that are in this Transformation phase. Many times I have heard Operations Directors mention “embedding” a team member into the teams. This is nothing more than simple sugar coating of the situation, as in most of the time that Embedded member does not have the final call on important critical matters at the hands of the team. They have to go back to the “mothership” to gain that approval. This does not work and you should avoid it at all costs.

Implementation of a comprehensive Automated CI/CD Pipeline is not an easy task, but it is much easier to implement than the right Culture and Mindset in the space you work in. Cultural changes and right mindsets will lead to better support from leadership and external elements within an Enterprise. This support will include better funding models where long term values are transparent to the leadership.

---
It’s only with such implementation and careful thinking that you can become and Agile team who not only delivers “working software”, but also maintains it as a product and keeps the customers happy.

Let me know your thoughts and experience in your Enterprise Transformation process and what has and hasn’t worked for you.
